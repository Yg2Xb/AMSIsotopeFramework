/***********************************************************
 *  File: basic_var.cpp
 *
 *  Modern C++ implementation file for basic variables in AMS Isotopes analysis.
 *
 *  History:
 *    20241029 - created by ZX.Yan
 ***********************************************************/
#include "basic_var.h"

namespace AMS_Iso {

// IsotopeVar implementation
IsotopeVar::IsotopeVar(int charge, int num, std::string name,
                       std::array<int, Constants::MAX_ISOTOPES> mass,
                       std::array<int, Constants::MAX_ISOTOPES> particle)
    : charge_(charge)
    , isotope_count_(num)
    , name_(std::move(name))
    , mass_(mass)
    , particle_(particle)
{
    if (charge < 1 || charge > Constants::ELEMENT_COUNT) {
        throw IsotopeError(
            "Invalid charge: " + std::to_string(charge) + 
            ". Must be between 1 and " + std::to_string(Constants::ELEMENT_COUNT));
    }
}

// BetaExpoT implementation
BetaExpoT::BetaExpoT(std::string name, double safety_factor,
                     double beta_limit, std::array<int, 2> bin_range)
    : name_(std::move(name))
    , safety_factor_(safety_factor)
    , beta_limit_(beta_limit)
    , bin_range_(bin_range)
{}

namespace {
// Define isotope data
const std::array<IsotopeVar, Constants::ELEMENT_COUNT> IsotopeData {{
    IsotopeVar(1, 2, "Proton",  std::array<int,3>{{1, 2, 0}}, std::array<int,3>{{0, 0, 0}}),
    IsotopeVar(2, 2, "Helium",  std::array<int,3>{{3, 4, 0}}, std::array<int,3>{{46, 47, 0}}),
    IsotopeVar(3, 2, "Lithium", std::array<int,3>{{6, 7, 0}}, std::array<int,3>{{61, 62, 0}}),
    IsotopeVar(4, 3, "Beryllium", std::array<int,3>{{7, 9, 10}}, std::array<int,3>{{63, 64, 114}}),
    IsotopeVar(5, 2, "Boron",   std::array<int,3>{{10, 11, 0}}, std::array<int,3>{{65, 66, 0}}),
    IsotopeVar(6, 2, "Carbon",  std::array<int,3>{{12, 13, 0}}, std::array<int,3>{{67, 117, 0}}),
    IsotopeVar(7, 2, "Nitrogen",std::array<int,3>{{14, 15, 0}}, std::array<int,3>{{68, 118, 0}}),
    IsotopeVar(8, 3, "Oxygen",  std::array<int,3>{{16, 17, 18}}, std::array<int,3>{{69, 0, 0}})
}};
} // anonymous namespace

// Global function implementation
const IsotopeVar& getIsotopeVar(int charge) {
    if (charge < 1 || charge > Constants::ELEMENT_COUNT) {
        throw IsotopeError(
            "Charge must be between 1 and " + std::to_string(Constants::ELEMENT_COUNT));
    }
    return IsotopeData[charge - 1];
}

int findIsotopeIndex(int mass, int charge) {
    if (charge < 1 || charge > Constants::ELEMENT_COUNT) {
        return -1;
    }
    
    const IsotopeVar& isotope = IsotopeData[charge - 1];
    const auto& masses = isotope.getMasses();
    
    // 在该元素的质量数组中查找对应的质量
    for (int i = 0; i < isotope.getIsotopeCount(); ++i) {
        if (masses[i] == mass) {
            return i;
        }
    }
    
    return -1;
}

namespace Binning {
    // Rigidity bins
    const std::array<double, Constants::RIGIDITY_BINS + 1> RigidityBins {{
        0.8, 1.00, 1.16, 1.33, 1.51, 1.71, 1.92, 2.15, 2.40, 2.67, 2.97, 3.29, 
        3.64, 4.02, 4.43, 4.88, 5.37, 5.90, 6.47, 7.09, 7.76, 8.48, 9.26, 10.1, 
        11.0, 12.0, 13.0, 14.1, 15.3, 16.6, 18.0, 19.5, 21.1, 22.8, 24.7, 26.7, 
        28.8, 31.1, 33.5, 36.1, 38.9, 41.9, 45.1, 48.5, 52.2, 56.1, 60.3, 64.8, 
        69.7, 74.9, 80.5, 86.5, 93.0, 100., 108., 116., 125., 135., 147., 160., 
        175., 192., 211., 233., 259., 291., 330., 379., 441., 525., 660., 880., 
        1300., 3300.
    }};
    
    // Efficiency bins
    const std::array<double, Constants::EFF_RIGIDITY_BINS + 1> EffRigidityBins {{
        2.15, 2.40, 2.67, 2.97, 3.29, 3.64, 4.02, 4.43, 4.88, 5.37, 5.90, 6.47,
        7.09, 7.76, 8.48, 9.26, 10.1, 11.0, 12.0, 13.0, 14.1, 15.3, 16.6, 18.0,
        19.5, 22.8, 26.7, 31.1, 36.1, 41.9, 48.5, 56.1, 64.8, 80.5, 108, 135,
        192, 259, 330, 525, 3000
    }};

    const std::array<double, 23> EkWideBin = {0.25, 0.42, 0.61, 0.86, 1.17, 1.55, 2.01, 2.57, 
                                            3.23, 4.00, 4.91, 5.99, 7.18, 8.60, 10.25, 12.13, 
                                            13.54, 15.85, 18.49, 21.53, 25.01, 29.04, 33.68};
    
    const std::array<double, 15> BkgEkWideBin {
        0.61, 0.86, 1.17, 1.55, 2.01, 2.57, 3.23, 4.00, 4.91, 5.99, 7.18, 8.60, 10.25, 12.13, 16.38
    };
    
    // Kinetic energy bins
    const std::array<std::array<std::array<double, Constants::RIGIDITY_BINS + 1>, 
                               Constants::MAX_ISOTOPES>, 
                    Constants::ELEMENT_COUNT> KineticEnergyBins {{
        // Each element's isotopes...
        {{  // Proton (Z=1)
            {{0.30, 0.44, 0.56, 0.69, 0.84, 1.02, 1.20, 1.41, 1.64, 1.90, 2.18, 2.49, 2.83, 3.20, 3.60, 4.04, 4.52, 5.04, 5.61, 6.22, 6.88, 7.60, 8.38, 9.21, 10.11, 11.11, 12.10, 13.20, 14.40, 15.70, 17.09, 18.59, 20.19, 21.89, 23.79, 25.79, 27.88, 30.18, 32.58, 35.18, 37.98, 40.98, 44.18, 47.58, 51.28, 55.18, 59.38, 63.88, 68.78, 73.97, 79.57, 85.57, 92.07, 99.07, 107.07, 115.07, 124.07, 134.07, 146.07, 159.07, 174.07, 191.07, 210.07, 232.07, 258.07, 290.07, 329.07, 378.07, 440.07, 524.07, 659.07, 879.07, 1299.07, 3299.07}},  // A=1
            {{0.08, 0.13, 0.17, 0.21, 0.27, 0.33, 0.41, 0.49, 0.59, 0.70, 0.82, 0.96, 1.11, 1.28, 1.47, 1.68, 1.91, 2.16, 2.44, 2.73, 3.06, 3.41, 3.79, 4.20, 4.65, 5.14, 5.64, 6.18, 6.78, 7.42, 8.12, 8.86, 9.66, 10.51, 11.45, 12.45, 13.50, 14.65, 15.84, 17.14, 18.54, 20.04, 21.64, 23.34, 25.19, 27.13, 29.23, 31.48, 33.93, 36.53, 39.33, 42.33, 45.58, 49.08, 53.08, 57.08, 61.58, 66.58, 72.57, 79.07, 86.57, 95.07, 104.57, 115.57, 128.57, 144.57, 164.07, 188.57, 219.57, 261.57, 329.07, 439.07, 649.07, 1649.07}},  // A=2
            {{0}}  // unused
        }},
        {{  // Helium (Z=2)
            {{0.14, 0.21, 0.28, 0.35, 0.44, 0.54, 0.65, 0.78, 0.92, 1.08, 1.26, 1.45, 1.67, 1.91, 2.17, 2.45, 2.77, 3.11, 3.48, 3.89, 4.33, 4.80, 5.31, 5.87, 6.46, 7.12, 7.79, 8.51, 9.31, 10.17, 11.11, 12.10, 13.17, 14.30, 15.56, 16.89, 18.29, 19.82, 21.42, 23.15, 25.02, 27.02, 29.15, 31.42, 33.88, 36.48, 39.28, 42.28, 45.54, 49.01, 52.74, 56.74, 61.08, 65.74, 71.08, 76.41, 82.41, 89.07, 97.07, 105.74, 115.74, 127.07, 139.74, 154.41, 171.74, 193.07, 219.07, 251.74, 293.07, 349.07, 439.07, 585.74, 865.74, 2199.07}},  // A=3
            {{0.08, 0.13, 0.17, 0.21, 0.27, 0.33, 0.41, 0.49, 0.59, 0.70, 0.82, 0.96, 1.11, 1.28, 1.47, 1.68, 1.91, 2.16, 2.44, 2.73, 3.06, 3.41, 3.79, 4.20, 4.65, 5.14, 5.64, 6.18, 6.78, 7.42, 8.12, 8.86, 9.66, 10.51, 11.45, 12.45, 13.50, 14.65, 15.84, 17.14, 18.54, 20.04, 21.64, 23.34, 25.19, 27.13, 29.23, 31.48, 33.93, 36.53, 39.33, 42.33, 45.58, 49.08, 53.08, 57.08, 61.58, 66.58, 72.57, 79.07, 86.57, 95.07, 104.57, 115.57, 128.57, 144.57, 164.07, 188.57, 219.57, 261.57, 329.07, 439.07, 649.07, 1649.07}},  // A=4
            {{0}}  // unused
        }},
        {{  // Lithium (Z=3)
            {{0.08, 0.13, 0.17, 0.21, 0.27, 0.33, 0.41, 0.49, 0.59, 0.70, 0.82, 0.96, 1.11, 1.28, 1.47, 1.68, 1.91, 2.16, 2.44, 2.73, 3.06, 3.41, 3.79, 4.20, 4.65, 5.14, 5.64, 6.18, 6.78, 7.42, 8.12, 8.86, 9.66, 10.51, 11.45, 12.45, 13.50, 14.65, 15.84, 17.14, 18.54, 20.04, 21.64, 23.34, 25.19, 27.13, 29.23, 31.48, 33.93, 36.53, 39.33, 42.33, 45.58, 49.08, 53.08, 57.08, 61.58, 66.58, 72.57, 79.07, 86.57, 95.07, 104.57, 115.57, 128.57, 144.57, 164.07, 188.57, 219.57, 261.57, 329.07, 439.07, 649.07, 1649.07}},  // A=6
            {{0.06, 0.09, 0.12, 0.16, 0.20, 0.25, 0.31, 0.38, 0.46, 0.54, 0.65, 0.76, 0.89, 1.03, 1.18, 1.36, 1.55, 1.76, 1.99, 2.25, 2.52, 2.82, 3.15, 3.50, 3.87, 4.30, 4.72, 5.18, 5.69, 6.24, 6.84, 7.48, 8.16, 8.88, 9.70, 10.55, 11.45, 12.43, 13.46, 14.57, 15.77, 17.05, 18.42, 19.88, 21.46, 23.13, 24.93, 26.86, 28.95, 31.18, 33.58, 36.15, 38.94, 41.94, 45.36, 48.79, 52.65, 56.93, 62.08, 67.65, 74.07, 81.36, 89.50, 98.93, 110.07, 123.79, 140.50, 161.50, 188.07, 224.07, 281.93, 376.21, 556.21, 1413.36}},  // A=7
            {{0}}  // unused
        }},
        {{  // Berlium (Z=4)
            {{0.11, 0.16, 0.21, 0.27, 0.34, 0.42, 0.51, 0.61, 0.73, 0.86, 1.00, 1.17, 1.35, 1.55, 1.77, 2.01, 2.28, 2.57, 2.88, 3.23, 3.60, 4.00, 4.44, 4.92, 5.42, 5.99, 6.56, 7.18, 7.86, 8.60, 9.40, 10.25, 11.16, 12.13, 13.21, 14.35, 15.55, 16.86, 18.23, 19.72, 21.32, 23.03, 24.86, 26.80, 28.91, 31.14, 33.54, 36.11, 38.91, 41.88, 45.08, 48.51, 52.22, 56.22, 60.79, 65.36, 70.50, 76.22, 83.07, 90.50, 99.07, 108.79, 119.64, 132.22, 147.07, 165.36, 187.64, 215.64, 251.07, 299.07, 376.21, 501.93, 741.93, 1884.78}},  // A=7   
            {{0.07, 0.10, 0.13, 0.17, 0.22, 0.27, 0.33, 0.40, 0.48, 0.58, 0.68, 0.80, 0.94, 1.08, 1.25, 1.43, 1.63, 1.85, 2.09, 2.35, 2.64, 2.95, 3.29, 3.65, 4.05, 4.48, 4.92, 5.40, 5.93, 6.51, 7.12, 7.79, 8.49, 9.25, 10.09, 10.97, 11.90, 12.92, 13.99, 15.14, 16.38, 17.71, 19.14, 20.64, 22.29, 24.02, 25.89, 27.88, 30.06, 32.37, 34.86, 37.52, 40.41, 43.52, 47.08, 50.63, 54.63, 59.08, 64.41, 70.19, 76.85, 84.41, 92.85, 102.63, 114.18, 128.41, 145.74, 167.52, 195.07, 232.40, 292.40, 390.18, 576.85, 1465.74}},  // A=9
            {{0.05, 0.08, 0.11, 0.14, 0.18, 0.22, 0.28, 0.34, 0.41, 0.49, 0.58, 0.68, 0.80, 0.93, 1.07, 1.23, 1.41, 1.61, 1.82, 2.05, 2.31, 2.59, 2.89, 3.21, 3.57, 3.96, 4.35, 4.79, 5.26, 5.77, 6.33, 6.92, 7.56, 8.24, 8.99, 9.79, 10.63, 11.54, 12.50, 13.54, 14.66, 15.85, 17.13, 18.49, 19.97, 21.53, 23.21, 25.01, 26.96, 29.04, 31.28, 33.68, 36.28, 39.08, 42.28, 45.48, 49.08, 53.08, 57.88, 63.08, 69.08, 75.87, 83.47, 92.27, 102.67, 115.47, 131.07, 150.67, 175.47, 209.07, 263.07, 351.07, 519.07, 1319.07}}  // A=10
        }},
        {{  // Boron (Z=5)
            {{0.08, 0.13, 0.17, 0.21, 0.27, 0.33, 0.41, 0.49, 0.59, 0.70, 0.82, 0.96, 1.11, 1.28, 1.47, 1.68, 1.91, 2.16, 2.44, 2.73, 3.06, 3.41, 3.79, 4.20, 4.65, 5.14, 5.64, 6.18, 6.78, 7.42, 8.12, 8.86, 9.66, 10.51, 11.45, 12.45, 13.50, 14.65, 15.84, 17.14, 18.54, 20.04, 21.64, 23.34, 25.19, 27.13, 29.23, 31.48, 33.93, 36.53, 39.33, 42.33, 45.58, 49.08, 53.08, 57.08, 61.58, 66.58, 72.57, 79.07, 86.57, 95.07, 104.57, 115.57, 128.57, 144.57, 164.07, 188.57, 219.57, 261.57, 329.07, 439.07, 649.07, 1649.07}},  // A=10
            {{0.07, 0.11, 0.14, 0.18, 0.23, 0.28, 0.35, 0.42, 0.50, 0.60, 0.71, 0.83, 0.97, 1.12, 1.29, 1.47, 1.68, 1.91, 2.15, 2.42, 2.72, 3.03, 3.38, 3.75, 4.15, 4.60, 5.05, 5.55, 6.09, 6.67, 7.30, 7.98, 8.70, 9.47, 10.33, 11.24, 12.19, 13.24, 14.32, 15.50, 16.78, 18.14, 19.59, 21.13, 22.81, 24.59, 26.49, 28.54, 30.76, 33.13, 35.67, 38.40, 41.35, 44.53, 48.17, 51.80, 55.89, 60.44, 65.89, 71.80, 78.62, 86.35, 94.98, 104.98, 116.80, 131.35, 149.07, 171.34, 199.53, 237.71, 299.07, 399.07, 589.98, 1499.07}},  // A=11
            {{0}}  // unused
        }},
        {{  // Carbon (Z=6)
            {{0.08, 0.13, 0.17, 0.21, 0.27, 0.33, 0.41, 0.49, 0.59, 0.70, 0.82, 0.96, 1.11, 1.28, 1.47, 1.68, 1.91, 2.16, 2.44, 2.73, 3.06, 3.41, 3.79, 4.20, 4.65, 5.14, 5.64, 6.18, 6.78, 7.42, 8.12, 8.86, 9.66, 10.51, 11.45, 12.45, 13.50, 14.65, 15.84, 17.14, 18.54, 20.04, 21.64, 23.34, 25.19, 27.13, 29.23, 31.48, 33.93, 36.53, 39.33, 42.33, 45.58, 49.08, 53.08, 57.08, 61.58, 66.58, 72.57, 79.07, 86.57, 95.07, 104.57, 115.57, 128.57, 144.57, 164.07, 188.57, 219.57, 261.57, 329.07, 439.07, 649.07, 1649.07}},  // A=12
            {{0.07, 0.11, 0.14, 0.18, 0.23, 0.29, 0.35, 0.43, 0.52, 0.61, 0.73, 0.85, 0.99, 1.14, 1.32, 1.51, 1.72, 1.95, 2.20, 2.47, 2.77, 3.09, 3.44, 3.82, 4.23, 4.69, 5.14, 5.64, 6.19, 6.79, 7.43, 8.12, 8.85, 9.63, 10.51, 11.43, 12.39, 13.45, 14.56, 15.76, 17.05, 18.43, 19.91, 21.47, 23.18, 24.98, 26.92, 28.99, 31.25, 33.65, 36.23, 39.00, 42.00, 45.23, 48.92, 52.62, 56.77, 61.38, 66.92, 72.92, 79.84, 87.69, 96.46, 106.61, 118.61, 133.38, 151.38, 173.99, 202.61, 241.38, 303.69, 405.22, 599.07, 1522.15}},  // A=13
            {{0}}  // unused
        }},
        {{  // Nitrogen (Z=7)
            {{0.08, 0.13, 0.17, 0.21, 0.27, 0.33, 0.41, 0.49, 0.59, 0.70, 0.82, 0.96, 1.11, 1.28, 1.47, 1.68, 1.91, 2.16, 2.44, 2.73, 3.06, 3.41, 3.79, 4.20, 4.65, 5.14, 5.64, 6.18, 6.78, 7.42, 8.12, 8.86, 9.66, 10.51, 11.45, 12.45, 13.50, 14.65, 15.84, 17.14, 18.54, 20.04, 21.64, 23.34, 25.19, 27.13, 29.23, 31.48, 33.93, 36.53, 39.33, 42.33, 45.58, 49.08, 53.08, 57.08, 61.58, 66.58, 72.57, 79.07, 86.57, 95.07, 104.57, 115.57, 128.57, 144.57, 164.07, 188.57, 219.57, 261.57, 329.07, 439.07, 649.07, 1649.07}},  // A=14
            {{0.07, 0.11, 0.15, 0.19, 0.24, 0.30, 0.36, 0.44, 0.53, 0.62, 0.74, 0.86, 1.01, 1.16, 1.34, 1.53, 1.74, 1.98, 2.23, 2.51, 2.81, 3.13, 3.49, 3.87, 4.29, 4.75, 5.21, 5.71, 6.27, 6.87, 7.52, 8.22, 8.96, 9.75, 10.63, 11.56, 12.54, 13.61, 14.73, 15.94, 17.25, 18.64, 20.14, 21.72, 23.45, 25.27, 27.22, 29.32, 31.61, 34.03, 36.65, 39.45, 42.48, 45.74, 49.48, 53.21, 57.41, 62.08, 67.68, 73.74, 80.74, 88.67, 97.54, 107.81, 119.94, 134.87, 153.07, 175.94, 204.87, 244.07, 307.07, 409.74, 605.74, 1539.07}},  // A=15
            {{0}}  // unused
        }},
        {{  // Oxygen (Z=8)
            {{0.08, 0.13, 0.17, 0.21, 0.27, 0.33, 0.41, 0.49, 0.59, 0.70, 0.82, 0.96, 1.11, 1.28, 1.47, 1.68, 1.91, 2.16, 2.44, 2.73, 3.06, 3.41, 3.79, 4.20, 4.65, 5.14, 5.64, 6.18, 6.78, 7.42, 8.12, 8.86, 9.66, 10.51, 11.45, 12.45, 13.50, 14.65, 15.84, 17.14, 18.54, 20.04, 21.64, 23.34, 25.19, 27.13, 29.23, 31.48, 33.93, 36.53, 39.33, 42.33, 45.58, 49.08, 53.08, 57.08, 61.58, 66.58, 72.57, 79.07, 86.57, 95.07, 104.57, 115.57, 128.57, 144.57, 164.07, 188.57, 219.57, 261.57, 329.07, 439.07, 649.07, 1649.07}},  // A=16
            {{0.07, 0.11, 0.15, 0.19, 0.24, 0.30, 0.37, 0.44, 0.53, 0.63, 0.75, 0.88, 1.02, 1.18, 1.35, 1.55, 1.76, 2.00, 2.25, 2.53, 2.84, 3.17, 3.52, 3.91, 4.33, 4.79, 5.26, 5.77, 6.33, 6.94, 7.59, 8.29, 9.04, 9.84, 10.73, 11.67, 12.65, 13.73, 14.86, 16.08, 17.40, 18.81, 20.31, 21.91, 23.65, 25.49, 27.46, 29.58, 31.88, 34.33, 36.96, 39.79, 42.84, 46.14, 49.90, 53.67, 57.90, 62.61, 68.25, 74.37, 81.43, 89.43, 98.37, 108.72, 120.95, 136.01, 154.37, 177.42, 206.60, 246.13, 309.66, 413.19, 610.83, 1552.01}},  // A=17
            {{0.07, 0.10, 0.13, 0.17, 0.22, 0.27, 0.33, 0.40, 0.48, 0.58, 0.68, 0.80, 0.94, 1.08, 1.25, 1.43, 1.63, 1.85, 2.09, 2.35, 2.64, 2.95, 3.29, 3.65, 4.05, 4.48, 4.92, 5.40, 5.93, 6.51, 7.12, 7.79, 8.49, 9.25, 10.09, 10.97, 11.90, 12.92, 13.99, 15.14, 16.38, 17.71, 19.14, 20.64, 22.29, 24.02, 25.89, 27.88, 30.06, 32.37, 34.86, 37.52, 40.41, 43.52, 47.08, 50.63, 54.63, 59.08, 64.41, 70.19, 76.85, 84.41, 92.85, 102.63, 114.18, 128.41, 145.74, 167.52, 195.07, 232.40, 292.40, 390.18, 576.85, 1465.74}}  // A=18
        }},
    }};
} // namespace Binning

namespace Detector {
    // Beta ExpoTime types
    const std::array<BetaExpoT, Constants::BETA_TYPES> BetaTypes {{
        BetaExpoT("TOF",  1.06,   0.4,   {{1, 7}}),
        BetaExpoT("NaF",  1.005,  0.75,  {{8, 20}}),
        BetaExpoT("Aero", 1.0005, 0.953, {{21, 27}})
    }};
    
    // Tracker cut names
    const std::array<std::string, Constants::TRACKER_CUTS> TrackerCutNames {{
        "BigZ", "UTOFQ", "innerTrk", "innerQ", "2ndTrk"
    }};
    
    // Cut names for TOF and RICH
    const std::array<std::string, 11> TOFCuts {{
        "PhysTrig", "+BasicAndFiducial", "+InnerTrk", "+InnerQ", 
        "+BigZ", "+UTOFQ", "+BG_Twiki", "+TOFGeoExS3S4", 
        "+tofChi2", "+NoAnyCut", "+NoAnyCut+Rig0"
    }};

    const std::array<std::string, 11> RICHCuts {{
        "PhysTrig", "+BasicAndFiducial", "+InnerTrk", "+InnerQ",
        "+BigZ", "+UTOFQ", "+BG_Twiki", "+richGeo", 
        "+richRec", "+richCharge", "+BG_MIT"
    }};

    // RICH detector parameters
    const std::array<std::array<int, Constants::ELEMENT_COUNT>, 2> RichBins {{
        {{400, 400, 240, 140, 200, 240, 240, 260}},  // NaF
        {{800, 800, 280, 140, 320, 400, 320, 336}}   // AGL
    }};
    
    const std::array<double, 2> RichAxis {{0.02, 0.012}};
    
    const std::array<std::array<int, Constants::ELEMENT_COUNT>, 2> TOFRichBins {{
        {{200, 200, 160, 160, 160, 200, 160, 200}},  // NaF
        {{200, 200, 160, 160, 160, 200, 160, 200}}   // AGL
    }};
    
    const std::array<double, 2> TOFAxis {{0.1, 0.1}};
    
    const std::array<std::string, 2> RichDetectorNames {{"NaF", "AGL"}};
} // namespace Detector

} // namespace AMS_Iso